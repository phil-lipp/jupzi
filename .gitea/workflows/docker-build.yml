name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

env:
  REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
  DNS_SERVER: ${{ secrets.DNS_SERVER }}
  REPO_URL: ${{ secrets.REPO_URL }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Configure DNS
        run: |
          # Install required tools
          apt-get update && apt-get install -y iputils-ping dnsutils curl
          
          # Debug environment variables
          echo "=== Environment Variables ==="
          echo "REGISTRY_URL: ${REGISTRY_URL:-not set}"
          echo "IMAGE_NAME: ${IMAGE_NAME:-not set}"
          echo "DNS_SERVER: ${DNS_SERVER:-not set}"
          echo "REPO_URL: ${REPO_URL:-not set}"
          
          # Validate registry URL format
          if [[ -z "$REGISTRY_URL" ]]; then
            echo "Error: REGISTRY_URL is not set"
            exit 1
          fi
          
          # Remove protocol if present
          REGISTRY_HOST=${REGISTRY_URL#*://}
          REGISTRY_HOST=${REGISTRY_HOST%%/*}
          echo "Registry host: $REGISTRY_HOST"
          
          # Backup original resolv.conf
          cp /etc/resolv.conf /etc/resolv.conf.bak
          echo "Original resolv.conf backed up to /etc/resolv.conf.bak"
          
          # Configure DNS with validation
          if [ -z "$DNS_SERVER" ]; then
            echo "Error: DNS_SERVER is not set"
            exit 1
          fi
          
          # Configure DNS
          cat > /etc/resolv.conf << EOF
          nameserver ${DNS_SERVER}
          options timeout:2 attempts:3 rotate
          EOF
          
          # Verify DNS configuration
          echo "=== Current DNS Configuration ==="
          cat /etc/resolv.conf
          
          echo "=== Testing DNS Resolution ==="
          echo "Testing registry host resolution:"
          echo "Using host command:"
          host ${REGISTRY_HOST} || true
          echo "Using dig command:"
          dig +short ${REGISTRY_HOST} || true
          echo "Using nslookup command:"
          nslookup ${REGISTRY_HOST} || true
          
          echo "Testing repository domain resolution:"
          host ${REPO_URL} || true
          dig +short ${REPO_URL} || true
          
          # Add hosts entry
          if [ -n "$DNS_SERVER" ] && [ -n "$REPO_URL" ]; then
            echo "${DNS_SERVER} ${REPO_URL}" >> /etc/hosts
            echo "Added hosts entry:"
            tail -n 1 /etc/hosts
          else
            echo "Warning: Could not add hosts entry - missing DNS_SERVER or REPO_URL"
          fi
          
          # Test network connectivity
          echo "=== Testing Network Connectivity ==="
          echo "Testing ping to DNS server:"
          ping -c 4 ${DNS_SERVER} || true
          
          echo "Testing ping to registry host:"
          ping -c 4 ${REGISTRY_HOST} || true

      - name: Verify Registry Connectivity
        run: |
          echo "=== Testing Registry Connectivity ==="
          
          # Extract registry host without protocol
          REGISTRY_HOST=${REGISTRY_URL#*://}
          REGISTRY_HOST=${REGISTRY_HOST%%/*}
          
          # Test HTTPS connectivity to registry
          echo "Testing HTTPS connection to registry:"
          echo "Attempting connection to: https://${REGISTRY_HOST}/v2/"
          curl -v --connect-timeout 10 https://${REGISTRY_HOST}/v2/ || true
          
          # Test Docker registry API
          echo "Testing Docker registry API:"
          echo "Attempting connection to: https://${REGISTRY_HOST}/v2/_catalog"
          curl -v --connect-timeout 10 https://${REGISTRY_HOST}/v2/_catalog || true
          
          # Check if registry requires authentication
          echo "Testing registry authentication:"
          if [ -n "$REGISTRY_USERNAME" ] && [ -n "$REGISTRY_PASSWORD" ]; then
            echo "Registry credentials are set"
            curl -v --connect-timeout 10 -u ${REGISTRY_USERNAME}:${REGISTRY_PASSWORD} https://${REGISTRY_HOST}/v2/_catalog || true
          else
            echo "Warning: Registry credentials not set"
          fi
          
          # Test DNS resolution of registry host
          echo "=== Final DNS Resolution Test ==="
          echo "Testing registry host resolution one final time:"
          dig +trace ${REGISTRY_HOST} || true
          echo "Testing with specific DNS server:"
          dig @${DNS_SERVER} ${REGISTRY_HOST} || true

      - name: Configure Git DNS
        run: |
          # Configure Git to use the correct DNS
          git config --global http.sslVerify false
          git config --global --add safe.directory /workspace/Development/jupzi
          
          # Test git connection
          echo "Testing git connection..."
          git ls-remote https://${REPO_URL} || true

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            NODE_ENV=production
            VERSION=${{ github.ref_name }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.zip
            dist/*.tar.gz
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 