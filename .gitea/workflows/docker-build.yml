name: Build and Push

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY_HOST: ${{ secrets.REGISTRY_URL }}
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get current date
        id: date
        run: echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Validate Secrets
        run: |
          echo "Validating required secrets..."
          if [ -z "${{ secrets.DNS_SERVER }}" ]; then
            echo "DNS_SERVER is not set"
            exit 1
          fi
          if [ -z "${{ secrets.REPO_URL }}" ]; then
            echo "REPO_URL is not set"
            exit 1
          fi
          if [ -z "${{ secrets.REGISTRY_URL }}" ]; then
            echo "REGISTRY_URL is not set"
            exit 1
          fi
          if [ -z "${{ secrets.IMAGE_NAME }}" ]; then
            echo "IMAGE_NAME is not set"
            exit 1
          fi
          if [ -z "${{ secrets.REGISTRY_USERNAME }}" ]; then
            echo "REGISTRY_USERNAME is not set"
            exit 1
          fi
          if [ -z "${{ secrets.REGISTRY_PASSWORD }}" ]; then
            echo "REGISTRY_PASSWORD is not set"
            exit 1
          fi
          echo "All required secrets are present"

      - name: Configure DNS
        run: |
          echo "Configuring DNS..."
          echo "nameserver ${{ secrets.DNS_SERVER }}" | sudo tee /etc/resolv.conf > /dev/null
          echo "DNS configured to use ${{ secrets.DNS_SERVER }}"

      - name: Test Network Connectivity
        run: |
          echo "Testing network connectivity..."
          echo "Testing registry host resolution:"
          echo "Using host command: host $REGISTRY_HOST"
          host "$REGISTRY_HOST"
          echo "Using dig command: dig $REGISTRY_HOST"
          dig "$REGISTRY_HOST"
          echo "Using nslookup command:"
          nslookup "$REGISTRY_HOST"

      - name: Configure Git Credentials
        run: |
          echo "Configuring git credentials..."
          git config --global credential.helper store
          echo "https://${{ secrets.REGISTRY_USERNAME }}:${{ secrets.REGISTRY_PASSWORD }}@$REGISTRY_HOST" > ~/.git-credentials
          chmod 600 ~/.git-credentials

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.REGISTRY_URL }}/${{ secrets.IMAGE_NAME }}:main
            ${{ secrets.REGISTRY_URL }}/${{ secrets.IMAGE_NAME }}:sha-${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.REGISTRY_URL }}/${{ secrets.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ secrets.REGISTRY_URL }}/${{ secrets.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            NODE_ENV=production
            VERSION=${{ github.ref_name }}
            BUILD_DATE=${{ steps.date.outputs.date }}
          labels: |
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=
            org.opencontainers.image.licenses=
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.title=${{ secrets.IMAGE_NAME }}
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ github.ref_name }}

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.zip
            dist/*.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 