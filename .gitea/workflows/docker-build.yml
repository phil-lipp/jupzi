name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

# Add permissions block to ensure access to secrets
permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # Add environment to ensure secrets are available
    environment:
      name: production
      url: ${{ secrets.REGISTRY_URL }}
    steps:
      - name: Validate Secrets
        run: |
          echo "=== Validating Required Secrets ==="
          
          # Function to validate secret
          validate_secret() {
            local secret_name=$1
            local secret_value=$2
            local is_optional=$3
            
            if [ -z "$secret_value" ]; then
              if [ "$is_optional" = "true" ]; then
                echo "Warning: Optional secret $secret_name is not set"
                return 0
              else
                echo "Error: Required secret $secret_name is not set or empty"
                return 1
              fi
            fi
            return 0
          }
          
          # Validate required secrets
          validate_secret "DNS_SERVER" "${{ secrets.DNS_SERVER }}" "false" || exit 1
          validate_secret "REPO_URL" "${{ secrets.REPO_URL }}" "false" || exit 1
          validate_secret "REGISTRY_URL" "${{ secrets.REGISTRY_URL }}" "false" || exit 1
          validate_secret "IMAGE_NAME" "${{ secrets.IMAGE_NAME }}" "false" || exit 1
          
          # Validate optional secrets
          validate_secret "REGISTRY_USERNAME" "${{ secrets.REGISTRY_USERNAME }}" "true"
          validate_secret "REGISTRY_PASSWORD" "${{ secrets.REGISTRY_PASSWORD }}" "true"
          
          echo "=== Secret Values (lengths only) ==="
          echo "DNS_SERVER length: ${#DNS_SERVER}"
          echo "REPO_URL length: ${#REPO_URL}"
          echo "REGISTRY_URL length: ${#REGISTRY_URL}"
          echo "IMAGE_NAME length: ${#IMAGE_NAME}"
          echo "REGISTRY_USERNAME length: ${#REGISTRY_USERNAME}"
          echo "REGISTRY_PASSWORD length: ${#REGISTRY_PASSWORD}"
          
          echo "All required secrets are present"

      - name: Configure DNS
        run: |
          set -euo pipefail  # Exit on any error
          
          # Install required tools
          apt-get update && apt-get install -y iputils-ping dnsutils curl
          
          # Debug environment variables
          echo "=== Environment Variables ==="
          echo "REGISTRY_URL: '${{ secrets.REGISTRY_URL }}'"
          echo "IMAGE_NAME: '${{ secrets.IMAGE_NAME }}'"
          echo "DNS_SERVER: '${{ secrets.DNS_SERVER }}'"
          echo "REPO_URL: '${{ secrets.REPO_URL }}'"
          
          # Extract registry host without protocol
          REGISTRY_URL="${{ secrets.REGISTRY_URL }}"
          if [[ $REGISTRY_URL =~ ^https?://([^/]+) ]]; then
            REGISTRY_HOST="${BASH_REMATCH[1]}"
          else
            REGISTRY_HOST="$REGISTRY_URL"
          fi
          echo "Registry host: '$REGISTRY_HOST'"
          
          # Backup original resolv.conf
          cp /etc/resolv.conf /etc/resolv.conf.bak
          echo "Original resolv.conf backed up to /etc/resolv.conf.bak"
          
          # Configure DNS
          echo "Configuring DNS with server: '${{ secrets.DNS_SERVER }}'"
          cat > /etc/resolv.conf << EOF
          nameserver ${{ secrets.DNS_SERVER }}
          options timeout:2 attempts:3 rotate
          EOF
          
          # Verify DNS configuration
          echo "=== Current DNS Configuration ==="
          cat /etc/resolv.conf
          
          echo "=== Testing DNS Resolution ==="
          echo "Testing registry host resolution:"
          echo "Using host command:"
          host "${REGISTRY_HOST}" || exit 1
          echo "Using dig command:"
          dig +short "${REGISTRY_HOST}" || exit 1
          echo "Using nslookup command:"
          nslookup "${REGISTRY_HOST}" || exit 1
          
          echo "Testing repository domain resolution:"
          host "${{ secrets.REPO_URL }}" || exit 1
          dig +short "${{ secrets.REPO_URL }}" || exit 1
          
          # Add hosts entry
          echo "Adding hosts entry: '${{ secrets.DNS_SERVER }} ${{ secrets.REPO_URL }}'"
          echo "${{ secrets.DNS_SERVER }} ${{ secrets.REPO_URL }}" >> /etc/hosts
          echo "Added hosts entry:"
          tail -n 1 /etc/hosts
          
          # Test network connectivity
          echo "=== Testing Network Connectivity ==="
          echo "Testing ping to DNS server:"
          ping -c 4 "${{ secrets.DNS_SERVER }}" || exit 1
          
          echo "Testing ping to registry host:"
          ping -c 4 "${REGISTRY_HOST}" || exit 1

      - name: Verify Registry Connectivity
        run: |
          set -euo pipefail  # Exit on any error
          
          echo "=== Testing Registry Connectivity ==="
          
          # Extract registry host without protocol
          REGISTRY_URL="${{ secrets.REGISTRY_URL }}"
          if [[ $REGISTRY_URL =~ ^https?://([^/]+) ]]; then
            REGISTRY_HOST="${BASH_REMATCH[1]}"
          else
            REGISTRY_HOST="$REGISTRY_URL"
          fi
          
          # Test HTTPS connectivity to registry
          echo "Testing HTTPS connection to registry:"
          echo "Attempting connection to: https://${REGISTRY_HOST}/v2/"
          curl -f --connect-timeout 10 "https://${REGISTRY_HOST}/v2/" || exit 1
          
          # Test Docker registry API
          echo "Testing Docker registry API:"
          echo "Attempting connection to: https://${REGISTRY_HOST}/v2/_catalog"
          curl -f --connect-timeout 10 "https://${REGISTRY_HOST}/v2/_catalog" || exit 1
          
          # Check if registry requires authentication
          if [ -n "${{ secrets.REGISTRY_USERNAME }}" ] && [ -n "${{ secrets.REGISTRY_PASSWORD }}" ]; then
            echo "Testing registry authentication:"
            curl -f --connect-timeout 10 -u "${{ secrets.REGISTRY_USERNAME }}:${{ secrets.REGISTRY_PASSWORD }}" "https://${REGISTRY_HOST}/v2/_catalog" || exit 1
          else
            echo "Warning: Registry credentials not set"
          fi
          
          # Test DNS resolution of registry host
          echo "=== Final DNS Resolution Test ==="
          echo "Testing registry host resolution one final time:"
          dig +trace "${REGISTRY_HOST}" || exit 1
          echo "Testing with specific DNS server:"
          dig @"${{ secrets.DNS_SERVER }}" "${REGISTRY_HOST}" || exit 1

      - name: Configure Git DNS
        run: |
          set -euo pipefail  # Exit on any error
          
          # Configure Git to use the correct DNS
          git config --global http.sslVerify false
          git config --global --add safe.directory /workspace/Development/jupzi
          
          # Test git connection
          echo "Testing git connection..."
          git ls-remote "https://${{ secrets.REPO_URL }}" || exit 1

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.REGISTRY_URL }}/${{ secrets.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.REGISTRY_URL }}/${{ secrets.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ secrets.REGISTRY_URL }}/${{ secrets.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            NODE_ENV=production
            VERSION=${{ github.ref_name }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.zip
            dist/*.tar.gz
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }} 